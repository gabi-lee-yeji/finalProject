<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.project.mapper.AdminMapper">
	
	<update id="updateRepMemStatus">
		update memberinfo 
			<set>
				status = #{status},
				<if test="status=='강제탈퇴'">
					mem_level = '',
					mem_point = 0
				</if>
			</set>
		where memid=#{memid}
	</update>
	
	<select id="getMemberInfo" resultType="spring.project.model.MemberInfoDTO">
		select * from memberinfo where memid=#{memid}
	</select>
	
	<select id="getreportMemInfo" resultType="map">
		select b.pnum, b.board_type, b.subject, a.reportcnt from 
		( select wr_num, count(*) as reportCnt from member_report where memid=#{memid} group by wr_num) a, 
		post_board b
		where
			a.wr_num=b.pnum
	</select>
	<select id="getReportMemList" resultType="spring.project.model.MemberInfoDTO">
			select * from 
				(select memid, count(*) as reportCnt from member_report group by memid) a, 
				memberinfo b 
			where 
				<![CDATA[ a.reportCnt >= 1	]]>
				and a.memid=b.memid
				<if test="status != null"> 
					and b.status = #{status} 
				</if>
			order by a.reportCnt
		
	</select>
	
	<select id="getMemberFilter" resultType="spring.project.model.MemberInfoDTO"
								parameterType="hashmap">
		select * from memberinfo  where
			<if test="search != null">
				${search} like '%${keyword}%'
			</if>
			<if test="status != null">
				and status in 
				<foreach collection="status" item="type" index="index" open="(" close=")" separator=",">
					#{type[index])
				</foreach>
			</if>
			<if test="mem_level != null">
				and mem_level in 
				<foreach collection="mem_level" item="type" index="index" open="(" close=")" separator=",">
					#{type[index])
				</foreach>
			</if>
			<if test="mem_point1 != 0">
				<![CDATA[ and mem_point >= #{mem_point1} ]]>
			</if>
			<if test="mem_point2 != 0">
				<![CDATA[ and mem_point <= #{mem_point2} ]]>
			</if>
			<if test="regDate1 != null">
				and regdate between #{regDate1} and #{regDate2}
			</if>
			order by 
	</select>
	
	<select id="getMemberCnt" resultType="int">
		select count(*) from memberinfo	
	</select>
	<select id="getMemberList" resultType="spring.project.model.MemberInfoDTO">
		select * from (select rownum r, list.* from (select * from memberInfo  
				<if test="sort != null">
					order by #{sort} #{order}
				</if>
				) list)
	</select>
	
	<select id="getSearchCnt" resultType="int">
		select count(*) from certiinfo where ${search} like '%${keyword}%'
	</select>
	<select id="getSearchList" resultType="spring.project.model.CertiInfoDTO"
								parameterType="spring.project.pagination.PagingDTO">
		select * from (select rownum r, list.* from (select 
			cnum,cname,category,ctype,cround,
			to_char(regStart,'YYYY-MM-DD') as regStart,
			to_char(regEnd,'YYYY-MM-DD') as regEnd,
			to_char(reg_addStart,'YYYY-MM-DD') as reg_addStart,
			to_char(reg_addEnd,'YYYY-MM-DD') as reg_addEnd,
			to_char(regStartTime,'HH24:MI') as regStartTime,
			to_char(regEndTime,'HH24:MI') as regEndTime,
			to_char(testDate,'YYYY-MM-DD') as testDate,
			to_char(resDate,'YYYY-MM-DD') as resDate
		from certiinfo where ${search} like '%${keyword}%') list)
        where r between #{startRow} and #{endRow}
	</select>
	
	<select id="getCertCnt" resultType="int">
		select count(*) from certiinfo
	</select>
	
	
	<update id="modCertInfo">
		update certiinfo
		<set>
			<if test="cname != null">cname=#{cname},</if>
			<if test="category != null">category=#{category},</if>
			<if test="cyear != null">cyear=#{cyear},</if>
			<if test="cround != null">cround=#{cround},</if>
			<if test="ctype != null">ctype=#{ctype},</if>
			<if test="regStart != null">
				regStart=to_date(#{regStart, jdbcType=VARCHAR},'YYYY-MM-DD'),
			</if>
			<if test="regEnd != null">
				regEnd=to_date(#{regEnd, jdbcType=VARCHAR},'YYYY-MM-DD'),
			</if>
			<if test="reg_addStart != null">
				reg_addStart=to_date(#{reg_addStart, jdbcType=VARCHAR},'YYYY-MM-DD'),
			</if>
			<if test="reg_addEnd != null">
				reg_addEnd=to_date(#{reg_addEnd, jdbcType=VARCHAR},'YYYY-MM-DD'),
			</if>
			<if test="regStartTime != null">
				regStartTime=to_date(#{regStartTime, jdbcType=VARCHAR},'HH24:MI'),
			</if>
			<if test="regEndTime != null">
				regEndTime=to_date(#{regEndTime, jdbcType=VARCHAR},'HH24:MI'),
			</if>
			<if test="testDate != null">
				testDate=to_date(#{testDate, jdbcType=VARCHAR},'YYYY-MM-DD'),
			</if>
			<if test="resDate != null">
				resDate=to_date(#{resDate, jdbcType=VARCHAR},'YYYY-MM-DD'),
			</if>
		</set>
		where cnum=#{cnum}
	</update>
	
	
	<select id="getCertiInfo" resultType="spring.project.model.CertiInfoDTO">
		select 
			cnum,cname,category,ctype,cround,
			to_char(regStart,'YYYY-MM-DD') as regStart,
			to_char(regEnd,'YYYY-MM-DD') as regEnd,
			to_char(reg_addStart,'YYYY-MM-DD') as reg_addStart,
			to_char(reg_addEnd,'YYYY-MM-DD') as reg_addEnd,
			to_char(regStartTime,'HH24:MI') as regStartTime,
			to_char(regEndTime,'HH24:MI') as regEndTime,
			to_char(testDate,'YYYY-MM-DD') as testDate,
			to_char(resDate,'YYYY-MM-DD') as resDate
		from certiinfo where cnum=#{cnum}
	</select>
	
	<select id="findNextseq" resultType="int">
		select ${sequence}.nextval from dual
	</select>
	
	<select id="findCurrseq" resultType="int">
		select last_number from seq
		where sequence_name = #{sequence}
	</select>
	
	<select id="getCertList" resultType="spring.project.model.CertiInfoDTO">
		select * from (select rownum r, list.* from (select 
			cnum,cname,category,ctype,cround,
			to_char(regStart,'YYYY-MM-DD') as regStart,
			to_char(regEnd,'YYYY-MM-DD') as regEnd,
			to_char(reg_addStart,'YYYY-MM-DD') as reg_addStart,
			to_char(reg_addEnd,'YYYY-MM-DD') as reg_addEnd,
			to_char(regStartTime,'HH24:MI') as regStartTime,
			to_char(regEndTime,'HH24:MI') as regEndTime,
			to_char(testDate,'YYYY-MM-DD') as testDate,
			to_char(resDate,'YYYY-MM-DD') as resDate
		from certiinfo order by 
			<choose>
				<when test="sort != null">
					${sort} ${order}
				</when>
				<otherwise>
					cnum asc
				</otherwise>
			</choose>
			nulls last) list)
        where r between #{startRow} and #{endRow}
	</select>
	
	<select id="getDelList" resultType="spring.project.model.CertiInfoDTO"> 
		select 
			cnum,cname,category,ctype,cround,
			to_char(regStart,'YYYY-MM-DD') as regStart,
			to_char(regEnd,'YYYY-MM-DD') as regEnd,
			to_char(reg_addStart,'YYYY-MM-DD') as reg_addStart,
			to_char(reg_addEnd,'YYYY-MM-DD') as reg_addEnd,
			to_char(regStartTime,'HH24:MI') as regStartTime,
			to_char(regEndTime,'HH24:MI') as regEndTime,
			to_char(testDate,'YYYY-MM-DD') as testDate,
			to_char(resDate,'YYYY-MM-DD') as resDate
		from certiinfo where cnum in 
		<foreach collection="array" item="cnum" open="(" separator="," close=")">
			#{cnum}
		</foreach>
		order by cnum
	</select>
	
	<delete id="delCertiInfo">
		delete from certiinfo where cnum in
		<foreach collection="array" item="cnum" open="(" separator="," close=")">
			#{cnum}
		</foreach>
	</delete>
	<delete id="delCertiDetail">
		delete from certidetail where cnum in
		<foreach collection="array" item="cnum" open="(" separator="," close=")">
			#{cnum}
		</foreach>
	</delete>
	
	<insert id="addCertiSchedule">
		insert into certiSchedule values (
			#{cnum},
			#{cyear,jdbcType=INTEGER},
			nvl(#{cround,jdbcType=INTEGER}, 0),
			#{ctype,jdbcType=VARCHAR},
			sysdate
		)
	</insert>
	
	<insert id="addCertiInfo">
		insert into certiInfo values (
			#{cnum},
			#{cname},
			#{category},
			#{clevel,jdbcType=VARCHAR},
			#{company,jdbcType=VARCHAR},
			#{website,jdbcType=VARCHAR},
			#{requirement,jdbcType=VARCHAR},
			#{cmethod,jdbcType=VARCHAR},
			#{subject,jdbcType=VARCHAR},
			#{cutline,jdbcType=VARCHAR},
			#{cinfo,jdbcType=VARCHAR},
			#{cjob,jdbcType=VARCHAR},
			#{status, jdbcType=VARCHAR},
			#{price, jdbcType=VARCHAR},
			#{ncs_cat,jdbcType=VARCHAR},
			#{notice, jdbcType=VARCHAR},
			sysdate
		)
	</insert>
	
	<insert id="addCertiDate" parameterType="spring.project.model.CertiDateDTO">
		insert into certidate values(
			<if test="cnum != null">
			</if>
			#{cyear},
			#{cround},
			#{ctype},
			#{docRegStart1},
			#{docRegEnd1},
			<if test="docRegStart2 != null">#{docRegStart2},</if>
			<if test="docRegStart2 == null">'',</if>
			<if test="docRegEnd2 != null">#{docRegEnd2},</if>
			<if test="docRegEnd2 == null">'',</if>
			#{docTestStart},
			<if test="docTestEnd != null">#{docTestEnd},</if>
			<if test="docTestEnd == null">'',</if>
			#{docResult},
			<if test="docSubmitStart != null">#{docSubmitStart},</if>
			<if test="docSubmitStart == null">'',</if>
			<if test="docSubmitEnd != null">#{docSubmitEnd},</if>
			<if test="docSubmitEnd == null">'',</if>
			#{pracRegStart1},
			#{pracRegEnd1},
			<if test="pracRegStart2 != null">#{pracRegStart2},</if>
			<if test="pracRegStart2 == null">'',</if>
			<if test="pracRegEnd2 != null">#{pracRegEnd2},</if>
			<if test="pracRegEnd2 == null">'',</if>
			#{pracTestStart},
			#{pracTestEnd},
			#{pracResStart}
			<if test="pracResEnd != null">, #{pracResEnd}</if>
			<if test="pracResEnd == null">,''</if>
		)
	</insert>
	
</mapper>